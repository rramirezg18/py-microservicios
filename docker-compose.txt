services:
  # === MySQL para auth-service (.NET) ===
  db:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: Perrito123
      MYSQL_DATABASE: usuariosApp
      MYSQL_USER: jin
      MYSQL_PASSWORD: Pollito123
      TZ: America/Guatemala
    ports:
      - "3308:3306"
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -pPerrito123 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 60

  # === API .NET ===
  auth-service:
    build:
      context: ./auth-service
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Default: >
        Server=db;Port=3306;Database=usuariosApp;User=jin;Password=Pollito123;
        TreatTinyAsBoolean=false;AllowPublicKeyRetrieval=True;SslMode=None
      Jwt__Key: change_me_prod_super_secret_key_please
      Jwt__Issuer: auth-service
      Jwt__Audience: scoreboard-app
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "5001:8080"   # http://localhost:5001
    restart: unless-stopped
    networks:
      default:
        aliases:
          - api   # Nginx del frontend usarÃ¡ http://api:8080

  # === Frontend Angular en Nginx ===
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - auth-service
    ports:
      - "8083:80"     # http://localhost:8083
    restart: unless-stopped

  # === PostgreSQL para teams-service ===
  teams-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: teamsBD
      POSTGRES_USER: jonathan
      POSTGRES_PASSWORD: Pollito123
      TZ: America/Guatemala
    ports:
      - "5435:5432"   # para DBeaver
    volumes:
      - teams_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jonathan -d teamsBD"]
      interval: 5s
      timeout: 3s
      retries: 60

  # === API Java Spring Boot ===
  teams-service:
    build:
      context: ./teams-service
      dockerfile: Dockerfile
    depends_on:
      teams-db:
        condition: service_healthy
    environment:
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:postgresql://teams-db:5432/teamsBD
      SPRING_DATASOURCE_USERNAME: jonathan
      SPRING_DATASOURCE_PASSWORD: Pollito123
      players.service.base-url: http://players-service:8000/api
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"

      # ðŸ‘‡ðŸ‘‡ **Nuevo**: ejecuta data.sql despuÃ©s de crear tablas
      SPRING_SQL_INIT_MODE: always
      SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION: "true"
      # ^ con esto, primero Hibernate crea/actualiza el schema y luego se corre data.sql

      # PLAYERS_SERVICE_BASE_URL: http://players-service:8000/api
    ports:
      - "8082:8082"   # http://localhost:8082
    restart: unless-stopped


  players-db:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass123
      MYSQL_DATABASE: playersBD
      MYSQL_USER: Robert
      MYSQL_PASSWORD: Pollito123
      TZ: America/Guatemala
    ports:
      - "3309:3306"
    volumes:
      - players_dbdata:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -prootpass123 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 60

  players-service:
    build:
      context: ./players-service
      dockerfile: Dockerfile
    depends_on:
      players-db:
        condition: service_healthy
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: http://localhost:8000
      DB_CONNECTION: mysql
      DB_HOST: players-db
      DB_PORT: 3306
      DB_DATABASE: playersBD
      DB_USERNAME: Robert
      DB_PASSWORD: Pollito123
    ports:
      - "8000:80"
    restart: unless-stopped


volumes:
  dbdata:
  teams_pgdata:
  players_dbdata:

